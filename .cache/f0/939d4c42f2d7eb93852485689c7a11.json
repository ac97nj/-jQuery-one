{"id":"main.js","dependencies":[],"generated":{"js":"// 记住因为后面在jquery里我们干掉了api ,直接return那个函数,下面声明了api,相当于把api从前面传到了后面, 相当于给那个函数命名\n//const api = jQuery ( '.test' ) // 不返回元素,返回api对象\n// 因为把api从前面传到了后面,后面的函数就是this,他就直接调用那个api为他的名字\n// 所以api可以进行链式操作,还有是调用后才确定this是api的,`.addClass`前面是什么调用,就是前面就传什么\n//=>api.addClass ( 'blue' ).addClass('red').addClass('yellow')\n//链式操作\n// 用 api 调用函数 addClass ,而 addClass 又返回了一个api ,所以后面可以在加一个. addClass('red')\n// 这时相当于 api.addClass = api 后面加上. addClass('red')\n// 相当于api.addClass('red')\n// 这就是 链式操作 ,这样做 就是因为前面仅仅return api\n//1. 第一个核心就是闭包\n//2. 第二个核心是链式操作\n//前面的公理,用函数来调用一个对象,那么函数的this就是前面的那个对象\n//obj.fn(p1)  // 同理  这个函数的里的this就是 obj\n//onj.fn.call(obj,p1)\n// *****%%%%%%代码的在最终版本,声明都可以不要了%%%%%%\n//jQuery ( '.test' ).addClass('blue').addClass('red').addClass('yellow' )\n//声明都可以不要了,直接jQuery得到元素放进this里面,直接在后面传递addClass调用this,相当于\n//jQuery ( '.test' ).addClass('blue') = tish\n// 相当于tish.addClass('red') =this\n// 相当于this.addClass('yellow' )\n// jQuery对象   =>>>>>>>>>    代指jQuery函数构造出来的对象\n//jQuery对象 =>>>>>>  不是说「jQuery这个对象」,是 说 指jQuery函数构造出来的对象\n// jQuery 是 一个  ******>>>>>>函数  记住\n//举例\n// Object是个函数\n// Object对象表示Object构造出的对象\n// Array是个函数\n// Array对象/数组对象表示Array构造出来的对象\n// Function是个函数\n// Function对象/函数对象表示Function构造出来的对象\n//所有首字母大写的 都代表了 他 构造出来了 一个 对象 ,记住: 首字母大写\n//--------------------------------------------------\n// const x1 =  jQuery ( '.test' ).find('.child')\n// console.log(x1)\n// x1.addclass('red')  这一步是报错的,因为前面返回的就变成了一个纯数组了\n// jQuery ( '.test' )\n//     .find('.child')\n//     .addClass('red')\n//     .addClass('yellow')\n//--------------------------------------------------\n// jQuery ( '.test' )       // 假设这个为api1\n//     .find('.child')  //假设这个为api2\n//     .addClass('red') //这句话就在api2中执行\n//     .addClass('yellow') ////这句话就在api2中执行\n//     .end()   // 通过这个 再次回到api1,就是'.test' 上操作\n//     .addClass('green')  // green 就在api1上 ,test 上面加一个green\n// const api1 =jQuery ( '.test' )  // 旧的 api1\n// const api2 = api1.find('.child').addClass('red')\n// const oldApi = api2.end().addClass('green')  // 调用end的只能是api2,是新的api\n// jQuery ( '.test' )\n//     .find('.child')\n//     .addClass('red')\n//     .addClass('yellow')\n//     .end()\n//     .addClass('green')\n// const  x =  jQuery('.test').find('.child')\n// x.each((div)=>console.log(div))  // x 就是jQuery('.test').find('.child') 传回的 对象\nvar x = jQuery('.test');\nx.children().print();"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"main.js","original":{"line":2,"column":0}},{"generated":{"line":2,"column":0},"source":"main.js","original":{"line":3,"column":0}},{"generated":{"line":3,"column":0},"source":"main.js","original":{"line":4,"column":0}},{"generated":{"line":4,"column":0},"source":"main.js","original":{"line":5,"column":0}},{"generated":{"line":5,"column":0},"source":"main.js","original":{"line":6,"column":0}},{"generated":{"line":6,"column":0},"source":"main.js","original":{"line":7,"column":0}},{"generated":{"line":7,"column":0},"source":"main.js","original":{"line":8,"column":0}},{"generated":{"line":8,"column":0},"source":"main.js","original":{"line":9,"column":0}},{"generated":{"line":9,"column":0},"source":"main.js","original":{"line":10,"column":0}},{"generated":{"line":10,"column":0},"source":"main.js","original":{"line":11,"column":0}},{"generated":{"line":11,"column":0},"source":"main.js","original":{"line":13,"column":0}},{"generated":{"line":12,"column":0},"source":"main.js","original":{"line":14,"column":0}},{"generated":{"line":13,"column":0},"source":"main.js","original":{"line":17,"column":0}},{"generated":{"line":14,"column":0},"source":"main.js","original":{"line":18,"column":0}},{"generated":{"line":15,"column":0},"source":"main.js","original":{"line":19,"column":0}},{"generated":{"line":16,"column":0},"source":"main.js","original":{"line":21,"column":0}},{"generated":{"line":17,"column":0},"source":"main.js","original":{"line":22,"column":0}},{"generated":{"line":18,"column":0},"source":"main.js","original":{"line":23,"column":0}},{"generated":{"line":19,"column":0},"source":"main.js","original":{"line":24,"column":0}},{"generated":{"line":20,"column":0},"source":"main.js","original":{"line":25,"column":0}},{"generated":{"line":21,"column":0},"source":"main.js","original":{"line":26,"column":0}},{"generated":{"line":22,"column":0},"source":"main.js","original":{"line":30,"column":0}},{"generated":{"line":23,"column":0},"source":"main.js","original":{"line":31,"column":0}},{"generated":{"line":24,"column":0},"source":"main.js","original":{"line":32,"column":0}},{"generated":{"line":25,"column":0},"source":"main.js","original":{"line":34,"column":0}},{"generated":{"line":26,"column":0},"source":"main.js","original":{"line":35,"column":0}},{"generated":{"line":27,"column":0},"source":"main.js","original":{"line":36,"column":0}},{"generated":{"line":28,"column":0},"source":"main.js","original":{"line":37,"column":0}},{"generated":{"line":29,"column":0},"source":"main.js","original":{"line":38,"column":0}},{"generated":{"line":30,"column":0},"source":"main.js","original":{"line":39,"column":0}},{"generated":{"line":31,"column":0},"source":"main.js","original":{"line":40,"column":0}},{"generated":{"line":32,"column":0},"source":"main.js","original":{"line":41,"column":0}},{"generated":{"line":33,"column":0},"source":"main.js","original":{"line":44,"column":0}},{"generated":{"line":34,"column":0},"source":"main.js","original":{"line":46,"column":0}},{"generated":{"line":35,"column":0},"source":"main.js","original":{"line":47,"column":0}},{"generated":{"line":36,"column":0},"source":"main.js","original":{"line":48,"column":0}},{"generated":{"line":37,"column":0},"source":"main.js","original":{"line":50,"column":0}},{"generated":{"line":38,"column":0},"source":"main.js","original":{"line":51,"column":0}},{"generated":{"line":39,"column":0},"source":"main.js","original":{"line":52,"column":0}},{"generated":{"line":40,"column":0},"source":"main.js","original":{"line":53,"column":0}},{"generated":{"line":41,"column":0},"source":"main.js","original":{"line":54,"column":0}},{"generated":{"line":42,"column":0},"source":"main.js","original":{"line":55,"column":0}},{"generated":{"line":43,"column":0},"source":"main.js","original":{"line":56,"column":0}},{"generated":{"line":44,"column":0},"source":"main.js","original":{"line":57,"column":0}},{"generated":{"line":45,"column":0},"source":"main.js","original":{"line":58,"column":0}},{"generated":{"line":46,"column":0},"source":"main.js","original":{"line":59,"column":0}},{"generated":{"line":47,"column":0},"source":"main.js","original":{"line":60,"column":0}},{"generated":{"line":48,"column":0},"source":"main.js","original":{"line":61,"column":0}},{"generated":{"line":49,"column":0},"source":"main.js","original":{"line":62,"column":0}},{"generated":{"line":50,"column":0},"source":"main.js","original":{"line":63,"column":0}},{"generated":{"line":51,"column":0},"source":"main.js","original":{"line":65,"column":0}},{"generated":{"line":52,"column":0},"source":"main.js","original":{"line":66,"column":0}},{"generated":{"line":53,"column":0},"source":"main.js","original":{"line":67,"column":0}},{"generated":{"line":54,"column":0},"source":"main.js","original":{"line":68,"column":0}},{"generated":{"line":55,"column":0},"source":"main.js","original":{"line":69,"column":0}},{"generated":{"line":56,"column":0},"source":"main.js","original":{"line":70,"column":0}},{"generated":{"line":57,"column":0},"source":"main.js","original":{"line":72,"column":0}},{"generated":{"line":58,"column":0},"source":"main.js","original":{"line":73,"column":0}},{"generated":{"line":59,"column":0},"source":"main.js","original":{"line":75,"column":0}},{"name":"x","generated":{"line":59,"column":4},"source":"main.js","original":{"line":75,"column":7}},{"generated":{"line":59,"column":5},"source":"main.js","original":{"line":75,"column":8}},{"name":"jQuery","generated":{"line":59,"column":8},"source":"main.js","original":{"line":75,"column":12}},{"generated":{"line":59,"column":14},"source":"main.js","original":{"line":75,"column":18}},{"generated":{"line":59,"column":15},"source":"main.js","original":{"line":75,"column":19}},{"generated":{"line":59,"column":22},"source":"main.js","original":{"line":75,"column":18}},{"generated":{"line":59,"column":23},"source":"main.js","original":{"line":75,"column":0}},{"name":"x","generated":{"line":60,"column":0},"source":"main.js","original":{"line":76,"column":0}},{"generated":{"line":60,"column":1},"source":"main.js","original":{"line":76,"column":1}},{"name":"children","generated":{"line":60,"column":2},"source":"main.js","original":{"line":76,"column":2}},{"generated":{"line":60,"column":10},"source":"main.js","original":{"line":76,"column":0}},{"name":"print","generated":{"line":60,"column":13},"source":"main.js","original":{"line":76,"column":13}},{"generated":{"line":60,"column":18},"source":"main.js","original":{"line":76,"column":0}}],"sources":{"main.js":"\n// 记住因为后面在jquery里我们干掉了api ,直接return那个函数,下面声明了api,相当于把api从前面传到了后面, 相当于给那个函数命名\n//const api = jQuery ( '.test' ) // 不返回元素,返回api对象\n// 因为把api从前面传到了后面,后面的函数就是this,他就直接调用那个api为他的名字\n// 所以api可以进行链式操作,还有是调用后才确定this是api的,`.addClass`前面是什么调用,就是前面就传什么\n//=>api.addClass ( 'blue' ).addClass('red').addClass('yellow')\n//链式操作\n// 用 api 调用函数 addClass ,而 addClass 又返回了一个api ,所以后面可以在加一个. addClass('red')\n// 这时相当于 api.addClass = api 后面加上. addClass('red')\n// 相当于api.addClass('red')\n// 这就是 链式操作 ,这样做 就是因为前面仅仅return api\n\n//1. 第一个核心就是闭包\n//2. 第二个核心是链式操作\n\n\n//前面的公理,用函数来调用一个对象,那么函数的this就是前面的那个对象\n//obj.fn(p1)  // 同理  这个函数的里的this就是 obj\n//onj.fn.call(obj,p1)\n\n// *****%%%%%%代码的在最终版本,声明都可以不要了%%%%%%\n//jQuery ( '.test' ).addClass('blue').addClass('red').addClass('yellow' )\n//声明都可以不要了,直接jQuery得到元素放进this里面,直接在后面传递addClass调用this,相当于\n//jQuery ( '.test' ).addClass('blue') = tish\n// 相当于tish.addClass('red') =this\n// 相当于this.addClass('yellow' )\n\n\n\n// jQuery对象   =>>>>>>>>>    代指jQuery函数构造出来的对象\n//jQuery对象 =>>>>>>  不是说「jQuery这个对象」,是 说 指jQuery函数构造出来的对象\n// jQuery 是 一个  ******>>>>>>函数  记住\n\n//举例\n// Object是个函数\n// Object对象表示Object构造出的对象\n// Array是个函数\n// Array对象/数组对象表示Array构造出来的对象\n// Function是个函数\n// Function对象/函数对象表示Function构造出来的对象\n//所有首字母大写的 都代表了 他 构造出来了 一个 对象 ,记住: 首字母大写\n\n\n//--------------------------------------------------\n\n// const x1 =  jQuery ( '.test' ).find('.child')\n// console.log(x1)\n// x1.addclass('red')  这一步是报错的,因为前面返回的就变成了一个纯数组了\n\n// jQuery ( '.test' )\n//     .find('.child')\n//     .addClass('red')\n//     .addClass('yellow')\n//--------------------------------------------------\n// jQuery ( '.test' )       // 假设这个为api1\n//     .find('.child')  //假设这个为api2\n//     .addClass('red') //这句话就在api2中执行\n//     .addClass('yellow') ////这句话就在api2中执行\n//     .end()   // 通过这个 再次回到api1,就是'.test' 上操作\n//     .addClass('green')  // green 就在api1上 ,test 上面加一个green\n// const api1 =jQuery ( '.test' )  // 旧的 api1\n// const api2 = api1.find('.child').addClass('red')\n// const oldApi = api2.end().addClass('green')  // 调用end的只能是api2,是新的api\n\n// jQuery ( '.test' )\n//     .find('.child')\n//     .addClass('red')\n//     .addClass('yellow')\n//     .end()\n//     .addClass('green')\n\n// const  x =  jQuery('.test').find('.child')\n// x.each((div)=>console.log(div))  // x 就是jQuery('.test').find('.child') 传回的 对象\n\nconst  x =  jQuery('.test')\nx.children().print()"},"lineCount":null}},"error":null,"hash":"1c276e9a8018391e13ff99fb93c916c2","cacheData":{"env":{}}}